/*
 * MainFrame.java
 *
 * Created on 2008/08/05, 10:42
 */
package exceltemplater;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Properties;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.velocity.Template;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.app.Velocity;

/**
 * ExcelTemplater
 * @author  181dev
 */
public class MainFrame extends javax.swing.JFrame {
    Vector columnNames;
    Vector data;
    File xlsFile;
    File velocityFile;
    ArrayList templateList;
    ArrayList xlsList;

    /**
     * コンボボックスに選択中のファイルを設定
     */
    void applyFileNameToUI() {
        jComboBoxVelocityTemplate.setSelectedItem(velocityFile.getName());
        jComboBoxXlsFile.setSelectedItem(xlsFile.getName());
    }

    /**
     * カレントフォルダ内のテンプレートを検索
     */
    void srchFiles() {
        String[] filelist = new File(".").list();
        templateList = new ArrayList();
        for (int i = 0; i < filelist.length; i++) {
            String string = filelist[i];
            if (string.matches(".+\\.txt") || string.matches(".+\\.vm")) {
                templateList.add(string);
            }
        }
        jComboBoxVelocityTemplate.setModel(new DefaultComboBoxModel(new Vector(templateList)));

        xlsList = new ArrayList();
        for (int i = 0; i < filelist.length; i++) {
            String string = filelist[i];
            if (string.matches(".+\\.xls")) {
                xlsList.add(string);
            }
        }
        jComboBoxXlsFile.setModel(new DefaultComboBoxModel(new Vector(xlsList)));
    }

    /**
     * propertiesに初期ファイルが指定されていればそれを読み込み
     */
    void loadInitialFile() {
        Properties prop = new Properties();
        try {
            prop.load(new FileInputStream("templater.properties"));
            String xlsFileName = prop.getProperty("load.xls");
            if (xlsFileName == null) {
                return;
            }
            xlsFile = new File(xlsFileName);

            String velocityFileName = prop.getProperty("load.velocity");
            if (velocityFileName == null) {
                return;
            }
            velocityFile = new File(velocityFileName);
            if (xlsFile.exists() == false) {
                return;
            }
            read(xlsFile);
            if (velocityFile.exists() == false) {
                return;
            }
            applyFileNameToUI();
            processTemplate();
        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /** Creates new form MainFrame */
    public MainFrame() {
        initComponents();
        srchFiles();
        loadInitialFile();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelTemplater = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jButtonEditTemplate = new javax.swing.JButton();
        jLabelTemplateInfo = new javax.swing.JLabel();
        jComboBoxVelocityTemplate = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jLabelXlsInfo = new javax.swing.JLabel();
        jComboBoxXlsFile = new javax.swing.JComboBox();
        jButtonEditXls = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaOutput = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jButtonSrchFiles = new javax.swing.JButton();
        jButtonProcess = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableXls = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("IwToolKit");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanelTemplater.setBackground(new java.awt.Color(240, 240, 240));
        jPanelTemplater.setMinimumSize(new java.awt.Dimension(198, 20));
        jPanelTemplater.setLayout(new java.awt.GridBagLayout());

        jPanel1.setOpaque(false);
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jButtonEditTemplate.setText("編集");
        jButtonEditTemplate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditTemplateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jButtonEditTemplate, gridBagConstraints);

        jLabelTemplateInfo.setText("テンプレートファイル");
        jLabelTemplateInfo.setPreferredSize(new java.awt.Dimension(100, 13));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabelTemplateInfo, gridBagConstraints);

        jComboBoxVelocityTemplate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxVelocityTemplateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jComboBoxVelocityTemplate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        jPanelTemplater.add(jPanel1, gridBagConstraints);

        jPanel4.setOpaque(false);
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabelXlsInfo.setText("入力表ファイル（.xls）");
        jLabelXlsInfo.setPreferredSize(new java.awt.Dimension(100, 13));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel4.add(jLabelXlsInfo, gridBagConstraints);

        jComboBoxXlsFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxXlsFileActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel4.add(jComboBoxXlsFile, gridBagConstraints);

        jButtonEditXls.setText("編集");
        jButtonEditXls.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditXlsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel4.add(jButtonEditXls, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelTemplater.add(jPanel4, gridBagConstraints);

        jTextAreaOutput.setColumns(20);
        jTextAreaOutput.setFont(new java.awt.Font("ＭＳ ゴシック", 0, 12)); // NOI18N
        jTextAreaOutput.setRows(5);
        jTextAreaOutput.setTabSize(4);
        jScrollPane2.setViewportView(jTextAreaOutput);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelTemplater.add(jScrollPane2, gridBagConstraints);

        jPanel2.setOpaque(false);

        jButtonSrchFiles.setText("ファイルリスト更新");
        jButtonSrchFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSrchFilesActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonSrchFiles);

        jButtonProcess.setText("コードの再生成");
        jButtonProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonProcessActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonProcess);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelTemplater.add(jPanel2, gridBagConstraints);

        jTabbedPane1.addTab("Templater 7", jPanelTemplater);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setMinimumSize(new java.awt.Dimension(23, 200));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(452, 140));

        jTableXls.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTableXls.setEnabled(false);
        jTableXls.setMinimumSize(new java.awt.Dimension(60, 100));
        jScrollPane1.setViewportView(jTableXls);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        jPanel3.add(jScrollPane1, gridBagConstraints);

        jLabel1.setText("出力");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel3.add(jLabel1, gridBagConstraints);

        jTabbedPane1.addTab("テーブルビューア", jPanel3);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jTabbedPane1, gridBagConstraints);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-631)/2, (screenSize.height-632)/2, 631, 632);
    }// </editor-fold>//GEN-END:initComponents

private void jButtonProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonProcessActionPerformed
    try {
        processTemplate();
    } catch (Exception ex) {//GEN-LAST:event_jButtonProcessActionPerformed
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

private void jButtonEditTemplateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditTemplateActionPerformed
    try {
        Runtime.getRuntime().exec("cmd /c \"" + velocityFile + "\"");
    } catch (IOException ex) {
        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
    }

}//GEN-LAST:event_jButtonEditTemplateActionPerformed

private void jComboBoxVelocityTemplateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxVelocityTemplateActionPerformed
    String selectedItem = (String) jComboBoxVelocityTemplate.getSelectedItem();
    velocityFile = new File(selectedItem);
    try {
        processTemplate();
    } catch (Exception ex) {
        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
    }

}//GEN-LAST:event_jComboBoxVelocityTemplateActionPerformed

private void jComboBoxXlsFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxXlsFileActionPerformed
    String selectedItem = (String) jComboBoxXlsFile.getSelectedItem();
    xlsFile = new File(selectedItem);
    try {
        read(this.xlsFile);
        processTemplate();
    } catch (Exception ex) {
        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
    }

}//GEN-LAST:event_jComboBoxXlsFileActionPerformed

private void jButtonEditXlsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditXlsActionPerformed
    try {
        Runtime.getRuntime().exec("cmd /c \"" + xlsFile + "\"");
    } catch (IOException ex) {
        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
    }
}//GEN-LAST:event_jButtonEditXlsActionPerformed

private void jButtonSrchFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSrchFilesActionPerformed
    srchFiles();
}//GEN-LAST:event_jButtonSrchFilesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            String lookfeel = javax.swing.UIManager.getSystemLookAndFeelClassName();
            javax.swing.UIManager.setLookAndFeel(lookfeel);
        } catch (Throwable e) {
            System.err.println(e.toString());
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    /**
     * xlsシートの読み込み
     * @param file
     * @throws java.io.IOException
     */
    void read(File file) throws IOException {
        FileInputStream fis = null;
        HSSFWorkbook workbook = null;
        fis = new FileInputStream(file);
        POIFSFileSystem fs = new POIFSFileSystem(fis);
        workbook = new HSSFWorkbook(fs);
        HSSFSheet sheet = workbook.getSheetAt(0);
        Iterator iter = sheet.rowIterator();

        //最初の行はヘッダ
        HSSFRow r = (HSSFRow) iter.next();
        this.columnNames = toVector(r);

        this.data = new Vector();
        while (iter.hasNext()) {
            r = (HSSFRow) iter.next();
            if (r == null) {
                break;
            } else {
                this.data.add(toVector(r));
            }
        }

        jTableXls.setModel(new DefaultTableModel(data, columnNames));
        jTableXls.updateUI();
    }

    /**
     * テーブルからデータ配列に変更
     * @param datas
     * @return
     */
    ArrayList tableToContext(Vector datas) {
        ArrayList arrayList = new ArrayList();
        Iterator iterator = datas.iterator();
        while (iterator.hasNext()) {
            Vector row = (Vector) iterator.next();
            arrayList.add(rowToContext(row));
        }
        return arrayList;
    }

    /**
     * 行からデータ配列に変更
     * @param row
     * @return
     */
    VelocityContext rowToContext(Vector row) {
        HashMap hashMap = new HashMap();

        for (int i = 0; i < row.size(); i++) {
            String str = (String) row.get(i);
            String key = (String) this.columnNames.get(i);

            //バリエーション増やす

            //columnName
            hashMap.put(key, str);
            //ColumnName
            hashMap.put(Util.capitalize(key), Util.capitalize(str));
            //column_name
            hashMap.put(key + "_", Util.underLineSeparate(str));
            //COLUMN_NAME
            hashMap.put(key.toUpperCase() + "_", Util.underLineSeparate(str).toUpperCase());
            //COLUMNNAME
            hashMap.put(key.toUpperCase(), Util.underLineSeparate(str));

        }
        return new VelocityContext(hashMap);

    }



    /**
     * velocityファイルの処理
     * @throws java.lang.Exception
     */
    void processTemplate() throws Exception {

        if (data == null) {
            return;
        }

        Velocity.init();
        VelocityContext vc = new VelocityContext();

        String fileName = Util.getFileNameWithoutExt(xlsFile);
        String[] fileSplit = fileName.split("-");

        vc.put("file", fileSplit[0]);
        vc.put("FILE", fileSplit[0].toUpperCase());
        vc.put("FILE_", Util.underLineSeparate(fileSplit[0]));
        vc.put("File", Util.capitalize(fileSplit[0]));

        //ハイフンでファイル名に付加情報をつける
        if(fileSplit.length == 2){
            vc.put("info", fileSplit[1]);
        }

        vc.put("table", tableToContext(this.data));

        StringWriter sw = new StringWriter();
        //テンプレートの取得
        Template template = Velocity.getTemplate(velocityFile.getPath(), "MS932");
        // テンプレートとデータを統合
        template.merge(vc, sw);

        jTextAreaOutput.setText(sw.toString());
        jTextAreaOutput.setCaretPosition(0);

    }

    /**
     * xlsシートからデータ配列に変換
     * @param row
     * @return
     */
    Vector toVector(HSSFRow row) {
        Vector vector = new Vector();
        Iterator cellIterator = row.cellIterator();
        while (cellIterator.hasNext()) {
            HSSFCell cell = (HSSFCell) cellIterator.next();
            int cellType = cell.getCellType();
            String str = "";
            if (cellType == HSSFCell.CELL_TYPE_NUMERIC) {
                str = "" + (int) cell.getNumericCellValue();
            } else {
                str = cell.getRichStringCellValue().getString();
            }
            vector.add(str);

        }
        return vector;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonEditTemplate;
    private javax.swing.JButton jButtonEditXls;
    private javax.swing.JButton jButtonProcess;
    private javax.swing.JButton jButtonSrchFiles;
    private javax.swing.JComboBox jComboBoxVelocityTemplate;
    private javax.swing.JComboBox jComboBoxXlsFile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelTemplateInfo;
    private javax.swing.JLabel jLabelXlsInfo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelTemplater;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableXls;
    private javax.swing.JTextArea jTextAreaOutput;
    // End of variables declaration//GEN-END:variables
}
